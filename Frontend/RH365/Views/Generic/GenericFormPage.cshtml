@* ============================================================================
   Archivo: GenericListPage.cshtml
   Proyecto: RH365 (Front-End MVC .NET 8)
   Ruta: Views/Generic/GenericListPage.cshtml
   Descripción: Vista genérica de LISTADO reutilizable. Incluye:
     - Toolbar CRUD y selector de vistas (UserGridViews).
     - Contenedor de grid dinámico.
     - Inclusión de modal genérico (Views/Generic/_Modal.cshtml).
   Notas:
     - Requiere ViewModel con: Title, EntityName, DataareaID, UserRefRecID,
       ViewConfigJson (JSON), AvailableViews (SelectListItem).
     - La lógica de grid vive en ~/ts/generic/generic-list.js.
     - El helper JS del modal (GLP_MODAL) se define aquí para que el partial
       _Modal.cshtml sea solo markup.
   ============================================================================ *@
@using Microsoft.AspNetCore.Mvc.Rendering
@model dynamic

@{
    ViewData["Title"] = Model?.Title ?? "Listado";
    string entityName = Model?.EntityName ?? "Entity";
    string dataareaId = Model?.DataareaID ?? "DAT";
    long userRefRecID = Model?.UserRefRecID ?? 0L;
    string viewConfig = Model?.ViewConfigJson ?? "{\"columns\":[],\"filters\":[],\"sorting\":[],\"grouping\":[],\"pageSize\":50}";
    IEnumerable<SelectListItem> views = Model?.AvailableViews ?? Array.Empty<SelectListItem>();
}

<div class="generic-list-page container-fluid" data-entity="@entityName" data-dataarea="@dataareaId" data-user="@userRefRecID">
    <!-- Encabezado -->
    <div class="d-flex align-items-center justify-content-between mb-3">
        <h2 class="mb-0">@ViewData["Title"]</h2>

        <!-- Selector de vistas guardadas -->
        <div class="d-flex gap-2 align-items-center">
            <select id="glp-view-selector" class="form-select form-select-sm" aria-label="Vistas guardadas">
                @foreach (var v in views)
                {
                    <option value="@v.Value" selected="@(v.Selected ? "selected" : null)">@v.Text</option>
                }
            </select>

            <button id="btn-glp-save-view" class="btn btn-sm btn-outline-primary" type="button" title="Guardar/Actualizar vista">
                <i class="bi bi-save"></i> Guardar
            </button>
            <button id="btn-glp-saveas-view" class="btn btn-sm btn-outline-secondary" type="button" title="Guardar como nueva vista">
                <i class="bi bi-journal-plus"></i> Guardar como…
            </button>
            <button id="btn-glp-setdefault" class="btn btn-sm btn-outline-success" type="button" title="Marcar como predeterminada">
                <i class="bi bi-star"></i> Predeterminada
            </button>
        </div>
    </div>

    <!-- Toolbar CRUD -->
    <div class="glp-toolbar d-flex flex-wrap gap-2 mb-3">
        <button id="btn-glp-new" class="btn btn-primary btn-sm" type="button"><i class="bi bi-plus-lg"></i> Nuevo</button>
        <button id="btn-glp-edit" class="btn btn-warning btn-sm" type="button" disabled><i class="bi bi-pencil"></i> Editar</button>
        <button id="btn-glp-delete" class="btn btn-danger btn-sm" type="button" disabled><i class="bi bi-trash"></i> Eliminar</button>
        <button id="btn-glp-refresh" class="btn btn-outline-secondary btn-sm" type="button"><i class="bi bi-arrow-repeat"></i> Refrescar</button>
        <div class="vr"></div>
        <button id="btn-glp-export" class="btn btn-outline-info btn-sm" type="button"><i class="bi bi-file-earmark-excel"></i> Exportar</button>
        <div id="glp-entity-actions" class="ms-auto"></div>
    </div>

    <!-- Filtros avanzados -->
    <div id="glp-filters" class="card mb-3 d-none">
        <div class="card-body">
            <div id="glp-filters-container"><!-- Render por JS --></div>
            <div class="mt-2 d-flex gap-2">
                <button id="btn-glp-apply-filters" class="btn btn-sm btn-primary" type="button">Aplicar</button>
                <button id="btn-glp-clear-filters" class="btn btn-sm btn-outline-secondary" type="button">Limpiar</button>
            </div>
        </div>
    </div>

    <!-- Grid -->
    <div id="glp-grid" class="card">
        <div class="card-body p-0">
            <div id="glp-grid-host" class="table-responsive"><!-- Grid host --></div>
        </div>
    </div>

    <!-- Config JSON -->
    <script id="glp-config" type="application/json">
        @Html.Raw(viewConfig)
    </script>
</div>

@* Modal genérico (markup). Ruta: Views/Generic/_Modal.cshtml *@
@await Html.PartialAsync("Generic/_Modal")

@section Styles {
    <link rel="stylesheet" href="~/css/generic/generic.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" integrity="sha384-..." crossorigin="anonymous">
}

@section Scripts {
    <script src="~/ts/generic/generic-list.js"></script>

    <script>
        // --------------------------------------------------------------
        // Helper Modal (GLP_MODAL): abre/cierra el modal genérico.
        // El partial _Modal.cshtml es solo markup.
        // --------------------------------------------------------------
        (function(){
            const $el = document.getElementById('glp-modal');
            const $dialog = document.getElementById('glp-modal-dialog');
            const $title = document.getElementById('glp-modal-title');
            const $body  = document.getElementById('glp-modal-body');
            const $btnOk = document.getElementById('glp-modal-accept');
            const $btnCancel = document.getElementById('glp-modal-cancel');
            if (!$el) return;

            let bsModal = null, onAccept = null, onCancel = null;

            function setSize(sz){
                $dialog.classList.remove('modal-sm','modal-lg','modal-xl');
                if (sz === 'sm') $dialog.classList.add('modal-sm');
                else if (sz === 'lg') $dialog.classList.add('modal-lg');
                else if (sz === 'xl') $dialog.classList.add('modal-xl');
            }

            window.GLP_MODAL = {
                open: ({ title = 'Acción', size = 'lg', html = '', onAccept:ok, onCancel:ko } = {}) => {
                    $title.textContent = title;
                    $body.innerHTML = html;
                    setSize(size);
                    onAccept = typeof ok === 'function' ? ok : null;
                    onCancel = typeof ko === 'function' ? ko : null;
                    bsModal = bsModal || new bootstrap.Modal($el);
                    bsModal.show();
                },
                close: () => { if (bsModal) bsModal.hide(); }
            };

            $btnOk?.addEventListener('click', () => {
                if (onAccept) { if (onAccept() !== false) window.GLP_MODAL.close(); }
                else window.GLP_MODAL.close();
            });
            $btnCancel?.addEventListener('click', () => { if (onCancel) onCancel(); });
            $el.addEventListener('hidden.bs.modal', () => {
                $body.innerHTML = ''; onAccept = onCancel = null;
            });
        })();

        // Bootstrap del ListPage
        window.GLP_BOOT && window.GLP_BOOT({
            entityName: "@entityName",
            dataareaId: "@dataareaId",
            userRefRecID: @userRefRecID,
            api: {
                viewsBase: "@Url.Content("~/api/UserGridViews")"
                // Aquí se agregarán endpoints CRUD de la entidad cuando se integren.
            }
        });
    </script>
}
