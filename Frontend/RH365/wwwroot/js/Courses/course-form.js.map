{"version":3,"file":"course-form.js","sourceRoot":"","sources":["../../../TS/Courses/course-form.ts"],"names":[],"mappings":"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","sourcesContent":["// ============================================================================\n// Archivo: course-form.ts\n// Proyecto: RH365.WebMVC\n// Ruta: TS/Courses/course-form.ts\n// Descripción: \n//   - Formulario dinámico para Crear/Editar Cursos\n//   - Tab General: Campos de negocio en LAYOUT DE 2 COLUMNAS\n//   - Tab Auditoría: Campos ISO 27001 en 1 columna\n//   - Renderizado separado para cada tab\n//   - Validación cliente + servidor\n//   - Integración con API REST (/api/Courses)\n//   - Labels a la izquierda de los campos\n// Estándar: ISO 27001 - Validación y seguridad de datos\n// ============================================================================\n\n(function () {\n    // ========================================================================\n    // CONFIGURACIÓN GLOBAL Y CONTEXTO\n    // ========================================================================\n    const w: any = window;\n    const d: Document = document;\n    const $: any = w.jQuery || w.$;\n\n    const apiBase: string = w.RH365.urls.apiBase;\n    const pageContainer = d.querySelector(\"#course-form-page\");\n\n    // Si no existe el contenedor, salir\n    if (!pageContainer) return;\n\n    // Extraer datos del DOM\n    const token: string = pageContainer.getAttribute(\"data-token\") || \"\";\n    const dataareaId: string = pageContainer.getAttribute(\"data-dataarea\") || \"DAT\";\n    const userRefRecID: number = parseInt(pageContainer.getAttribute(\"data-user\") || \"0\", 10);\n    const recId: number = parseInt(pageContainer.getAttribute(\"data-recid\") || \"0\", 10);\n    const isNew: boolean = pageContainer.getAttribute(\"data-isnew\") === \"true\";\n\n    // ========================================================================\n    // INTERFACES Y TIPOS\n    // ========================================================================\n\n    /**\n     * Configuración de un campo del formulario.\n     * Define cómo se debe renderizar y validar cada campo.\n     */\n    interface FieldConfig {\n        field: string;\n        label: string;\n        type: 'text' | 'number' | 'date' | 'datetime' | 'textarea' | 'select' | 'checkbox';\n        required?: boolean;\n        maxLength?: number;\n        options?: { value: string; text: string }[];\n        placeholder?: string;\n        helpText?: string;\n        readonly?: boolean;\n        column?: 'left' | 'right';\n    }\n\n    // Variable global para almacenar los datos del curso cargados desde el API\n    let courseData: any = null;\n\n    // Cache de tipos de curso y salones\n    let courseTypesMap: Map<number, string> = new Map();\n    let classRoomsMap: Map<number, string> = new Map();\n\n    // ========================================================================\n    // DEFINICIÓN DE CAMPOS - TAB GENERAL (Campos de Negocio en 2 COLUMNAS)\n    // ========================================================================\n    const businessFields: FieldConfig[] = [\n        // COLUMNA IZQUIERDA\n        {\n            field: 'CourseCode',\n            label: 'Código Curso',\n            type: 'text',\n            required: true,\n            maxLength: 50,\n            placeholder: 'TECH-2025-001',\n            column: 'left'\n        },\n        {\n            field: 'Name',\n            label: 'Nombre',\n            type: 'text',\n            required: true,\n            maxLength: 200,\n            column: 'left'\n        },\n        {\n            field: 'CourseTypeRefRecID',\n            label: 'Tipo de Curso',\n            type: 'select',\n            required: true,\n            options: [], // Se llenará dinámicamente\n            column: 'left'\n        },\n        {\n            field: 'ClassRoomRefRecID',\n            label: 'Salón',\n            type: 'select',\n            required: false,\n            options: [], // Se llenará dinámicamente\n            column: 'left'\n        },\n        {\n            field: 'Description',\n            label: 'Descripción',\n            type: 'textarea',\n            maxLength: 500,\n            column: 'left'\n        },\n        {\n            field: 'StartDate',\n            label: 'Fecha Inicio',\n            type: 'datetime',\n            required: true,\n            column: 'left'\n        },\n        {\n            field: 'EndDate',\n            label: 'Fecha Fin',\n            type: 'datetime',\n            required: true,\n            column: 'left'\n        },\n        {\n            field: 'MinStudents',\n            label: 'Mínimo Estudiantes',\n            type: 'number',\n            required: true,\n            column: 'left'\n        },\n        {\n            field: 'MaxStudents',\n            label: 'Máximo Estudiantes',\n            type: 'number',\n            required: true,\n            column: 'left'\n        },\n\n        // COLUMNA DERECHA\n        {\n            field: 'IsMatrixTraining',\n            label: 'Matriz de Formación',\n            type: 'checkbox',\n            column: 'right'\n        },\n        {\n            field: 'InternalExternal',\n            label: 'Tipo',\n            type: 'select',\n            required: true,\n            options: [\n                { value: '0', text: 'Interno' },\n                { value: '1', text: 'Externo' }\n            ],\n            column: 'right'\n        },\n        {\n            field: 'Periodicity',\n            label: 'Periodicidad',\n            type: 'number',\n            required: true,\n            column: 'right'\n        },\n        {\n            field: 'QtySessions',\n            label: 'Cantidad de Sesiones',\n            type: 'number',\n            required: true,\n            column: 'right'\n        },\n        {\n            field: 'Objetives',\n            label: 'Objetivos',\n            type: 'textarea',\n            maxLength: 1000,\n            column: 'right'\n        },\n        {\n            field: 'Topics',\n            label: 'Temas',\n            type: 'textarea',\n            maxLength: 1000,\n            column: 'right'\n        },\n        {\n            field: 'CourseStatus',\n            label: 'Estado del Curso',\n            type: 'select',\n            required: true,\n            options: [\n                { value: '0', text: 'Borrador' },\n                { value: '1', text: 'Planificado' },\n                { value: '2', text: 'En Curso' },\n                { value: '3', text: 'Finalizado' },\n                { value: '4', text: 'Cancelado' }\n            ],\n            column: 'right'\n        },\n        {\n            field: 'Observations',\n            label: 'Observaciones',\n            type: 'textarea',\n            maxLength: 500,\n            column: 'right'\n        }\n    ];\n\n    // ========================================================================\n    // DEFINICIÓN DE CAMPOS - TAB AUDITORÍA (SOLO ISO 27001)\n    // ========================================================================\n    const auditFields: FieldConfig[] = [\n        {\n            field: 'RecID',\n            label: 'RecID (Clave Primaria)',\n            type: 'number',\n            readonly: true,\n        },\n        {\n            field: 'ID',\n            label: 'ID Sistema',\n            type: 'text',\n            readonly: true,\n        },\n        {\n            field: 'DataareaID',\n            label: 'Empresa (DataareaID)',\n            type: 'text',\n            readonly: true,\n        },\n        {\n            field: 'CreatedBy',\n            label: 'Creado Por',\n            type: 'text',\n            readonly: true,\n        },\n        {\n            field: 'CreatedOn',\n            label: 'Fecha de Creación',\n            type: 'datetime',\n            readonly: true,\n        },\n        {\n            field: 'ModifiedBy',\n            label: 'Modificado Por',\n            type: 'text',\n            readonly: true,\n        },\n        {\n            field: 'ModifiedOn',\n            label: 'Fecha de Última Modificación',\n            type: 'datetime',\n            readonly: true,\n        }\n    ];\n\n    // ========================================================================\n    // UTILIDADES - COMUNICACIÓN CON API\n    // ========================================================================\n\n    /**\n     * Realiza una petición HTTP al API con manejo de autenticación.\n     * @param url URL completa del endpoint\n     * @param options Opciones adicionales para fetch (method, body, etc.)\n     * @returns Promise con la respuesta JSON parseada\n     */\n    const fetchJson = async (url: string, options?: RequestInit): Promise<any> => {\n        const headers: Record<string, string> = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        };\n\n        // Agregar token de autenticación si existe\n        if (token) {\n            headers['Authorization'] = `Bearer ${token}`;\n        }\n\n        const response = await fetch(url, { ...options, headers });\n\n        // Si la respuesta no es exitosa, lanzar error con el detalle\n        if (!response.ok) {\n            const errorData = await response.json().catch(() => ({}));\n            throw new Error(JSON.stringify(errorData));\n        }\n\n        return response.json();\n    };\n\n    // ========================================================================\n    // CARGA DE DATOS DE REFERENCIA\n    // ========================================================================\n\n    const loadCourseTypes = async (): Promise<void> => {\n        try {\n            const url = `${apiBase}/CourseTypes?pageNumber=1&pageSize=1000`;\n            const response: any = await fetchJson(url);\n\n            let courseTypes: any[] = [];\n\n            if (Array.isArray(response)) {\n                courseTypes = response;\n            } else if (response?.Data && Array.isArray(response.Data)) {\n                courseTypes = response.Data;\n            }\n\n            courseTypes.forEach((type: any) => {\n                if (type.RecID && type.Name) {\n                    courseTypesMap.set(type.RecID, type.Name);\n                }\n            });\n\n            // Actualizar opciones del campo CourseTypeRefRecID\n            const courseTypeField = businessFields.find(f => f.field === 'CourseTypeRefRecID');\n            if (courseTypeField) {\n                courseTypeField.options = [\n                    { value: '', text: '-- Seleccione --' },\n                    ...Array.from(courseTypesMap.entries()).map(([recId, name]) => ({\n                        value: recId.toString(),\n                        text: name\n                    }))\n                ];\n            }\n\n            console.log(`✅ ${courseTypesMap.size} tipos de curso cargados`);\n        } catch (error) {\n            console.error('⚠️ Error cargando tipos de curso:', error);\n        }\n    };\n\n    const loadClassRooms = async (): Promise<void> => {\n        try {\n            const url = `${apiBase}/ClassRooms?pageNumber=1&pageSize=1000`;\n            const response: any = await fetchJson(url);\n\n            let classRooms: any[] = [];\n\n            if (Array.isArray(response)) {\n                classRooms = response;\n            } else if (response?.Data && Array.isArray(response.Data)) {\n                classRooms = response.Data;\n            }\n\n            classRooms.forEach((room: any) => {\n                if (room.RecID && room.Name) {\n                    classRoomsMap.set(room.RecID, room.Name);\n                }\n            });\n\n            // Actualizar opciones del campo ClassRoomRefRecID\n            const classRoomField = businessFields.find(f => f.field === 'ClassRoomRefRecID');\n            if (classRoomField) {\n                classRoomField.options = [\n                    { value: '', text: '-- Seleccione --' },\n                    ...Array.from(classRoomsMap.entries()).map(([recId, name]) => ({\n                        value: recId.toString(),\n                        text: name\n                    }))\n                ];\n            }\n\n            console.log(`✅ ${classRoomsMap.size} salones cargados`);\n        } catch (error) {\n            console.error('⚠️ Error cargando salones:', error);\n        }\n    };\n\n    // ========================================================================\n    // RENDERIZADO DE CAMPOS\n    // ========================================================================\n\n    /**\n     * Genera el HTML de un campo según su configuración.\n     * Labels siempre a la izquierda del campo.\n     * @param config Configuración del campo\n     * @param value Valor actual del campo\n     * @param is2Column Si es true, ajusta las clases para layout de 2 columnas\n     * @returns String con el HTML del campo\n     */\n    const renderField = (config: FieldConfig, value: any, is2Column: boolean = false): string => {\n        const fieldId = config.field;\n        const fieldName = config.field;\n\n        // Labels SIEMPRE a la izquierda\n        const labelClass = is2Column\n            ? 'control-label col-md-4 col-sm-4 col-xs-12'\n            : 'control-label col-md-3 col-sm-3 col-xs-12';\n\n        const inputContainerClass = is2Column\n            ? 'col-md-8 col-sm-8 col-xs-12'\n            : 'col-md-6 col-sm-6 col-xs-12';\n\n        const requiredMark = config.required ? '<span class=\"required\">*</span>' : '';\n        const readonlyAttr = config.readonly ? 'readonly' : '';\n        const requiredAttr = config.required ? 'required' : '';\n\n        let inputHtml = '';\n        let displayValue = value ?? '';\n\n        // Generar input según el tipo de campo\n        switch (config.type) {\n            case 'textarea':\n                inputHtml = `<textarea id=\"${fieldId}\" name=\"${fieldName}\" class=\"form-control\" rows=\"3\" maxlength=\"${config.maxLength || 500}\" ${readonlyAttr} ${requiredAttr}>${displayValue}</textarea>`;\n                break;\n\n            case 'select':\n                const options = config.options || [];\n                const optionsHtml = options.map(opt =>\n                    `<option value=\"${opt.value}\" ${displayValue.toString() === opt.value ? 'selected' : ''}>${opt.text}</option>`\n                ).join('');\n                inputHtml = `<select id=\"${fieldId}\" name=\"${fieldName}\" class=\"form-control\" ${readonlyAttr ? 'disabled' : ''} ${requiredAttr}>${optionsHtml}</select>`;\n                break;\n\n            case 'checkbox':\n                const checked = displayValue === true || displayValue === 'true' ? 'checked' : '';\n                inputHtml = `<input type=\"checkbox\" id=\"${fieldId}\" name=\"${fieldName}\" class=\"flat\" ${checked} ${readonlyAttr ? 'disabled' : ''}>`;\n                break;\n\n            case 'datetime':\n                // Formatear datetime para input datetime-local (YYYY-MM-DDTHH:MM)\n                if (displayValue && typeof displayValue === 'string' && /^\\d{4}-\\d{2}-\\d{2}T/.test(displayValue)) {\n                    displayValue = displayValue.slice(0, 16);\n                }\n                if (readonlyAttr) {\n                    if (displayValue) {\n                        displayValue = new Date(displayValue).toLocaleString('es-DO', {\n                            year: 'numeric',\n                            month: '2-digit',\n                            day: '2-digit',\n                            hour: '2-digit',\n                            minute: '2-digit'\n                        });\n                    }\n                    inputHtml = `<input type=\"text\" id=\"${fieldId}\" name=\"${fieldName}\" class=\"form-control\" value=\"${displayValue}\" ${readonlyAttr} ${requiredAttr}>`;\n                } else {\n                    inputHtml = `<input type=\"datetime-local\" id=\"${fieldId}\" name=\"${fieldName}\" class=\"form-control\" value=\"${displayValue}\" ${readonlyAttr} ${requiredAttr}>`;\n                }\n                break;\n\n            case 'date':\n                if (displayValue && typeof displayValue === 'string' && /^\\d{4}-\\d{2}-\\d{2}T/.test(displayValue)) {\n                    displayValue = displayValue.split('T')[0];\n                }\n                inputHtml = `<input type=\"date\" id=\"${fieldId}\" name=\"${fieldName}\" class=\"form-control\" value=\"${displayValue}\" ${readonlyAttr} ${requiredAttr}>`;\n                break;\n\n            case 'number':\n                inputHtml = `<input type=\"number\" id=\"${fieldId}\" name=\"${fieldName}\" class=\"form-control\" value=\"${displayValue}\" ${readonlyAttr} ${requiredAttr}>`;\n                break;\n\n            default: // text\n                inputHtml = `<input type=\"text\" id=\"${fieldId}\" name=\"${fieldName}\" class=\"form-control\" maxlength=\"${config.maxLength || 255}\" value=\"${displayValue}\" placeholder=\"${config.placeholder || ''}\" ${readonlyAttr} ${requiredAttr}>`;\n                break;\n        }\n\n        const helpTextHtml = config.helpText ? `<span class=\"help-block\">${config.helpText}</span>` : '';\n\n        return `\n            <div class=\"form-group\">\n                <label class=\"${labelClass}\" for=\"${fieldId}\">\n                    ${config.label} ${requiredMark}\n                </label>\n                <div class=\"${inputContainerClass}\">\n                    ${inputHtml}\n                    ${helpTextHtml}\n                </div>\n            </div>\n        `;\n    };\n\n    // ========================================================================\n    // CARGA DE DATOS DEL CURSO\n    // ========================================================================\n\n    /**\n     * Carga los datos del curso desde el API (solo si es edición).\n     * En modo creación, renderiza los formularios vacíos.\n     */\n    const loadCourseData = async (): Promise<void> => {\n        if (isNew) {\n            renderBusinessForm({});\n            renderAuditForm({});\n            return;\n        }\n\n        try {\n            const url = `${apiBase}/Courses/${recId}`;\n            courseData = await fetchJson(url);\n\n            renderBusinessForm(courseData);\n            renderAuditForm(courseData);\n        } catch (error) {\n            (w as any).ALERTS.error('Error al cargar los datos del curso', 'Error');\n            renderBusinessForm({});\n            renderAuditForm({});\n        }\n    };\n\n    // ========================================================================\n    // RENDERIZADO DE FORMULARIOS\n    // ========================================================================\n\n    /**\n     * Renderiza el formulario de campos de negocio en LAYOUT DE 2 COLUMNAS.\n     * Separa los campos según la propiedad 'column' de cada FieldConfig.\n     * @param data Datos del curso a mostrar\n     */\n    const renderBusinessForm = (data: any): void => {\n        const containerLeft = $('#dynamic-fields-col-left');\n        const containerRight = $('#dynamic-fields-col-right');\n\n        containerLeft.empty();\n        containerRight.empty();\n\n        businessFields\n            .filter(config => config.column === 'left')\n            .forEach(config => {\n                const value = data[config.field];\n                const fieldHtml = renderField(config, value, true);\n                containerLeft.append(fieldHtml);\n            });\n\n        businessFields\n            .filter(config => config.column === 'right')\n            .forEach(config => {\n                const value = data[config.field];\n                const fieldHtml = renderField(config, value, true);\n                containerRight.append(fieldHtml);\n            });\n\n        if ($.fn.iCheck) {\n            $('.flat').iCheck({\n                checkboxClass: 'icheckbox_flat-green'\n            });\n        }\n    };\n\n    /**\n     * Renderiza el formulario de campos de auditoría (Tab Auditoría).\n     * SOLO renderiza los campos definidos en auditFields.\n     * @param data Datos del curso a mostrar\n     */\n    const renderAuditForm = (data: any): void => {\n        const container = $('#audit-fields-container');\n        container.empty();\n\n        if (isNew) {\n            container.html(`\n                <div class=\"alert alert-warning\" role=\"alert\">\n                    <i class=\"fa fa-info-circle\"></i>\n                    <strong>Modo Creación:</strong> \n                    Los campos de auditoría se generarán automáticamente después de guardar el curso.\n                </div>\n            `);\n            return;\n        }\n\n        auditFields.forEach(config => {\n            const value = data[config.field];\n            const fieldHtml = renderField(config, value, false);\n            container.append(fieldHtml);\n        });\n    };\n\n    // ========================================================================\n    // CAPTURA DE DATOS DEL FORMULARIO\n    // ========================================================================\n\n    /**\n     * Obtiene los datos del formulario de negocio para enviar al API.\n     * SOLO captura campos editables del Tab General (businessFields).\n     * @returns Objeto con los datos del formulario\n     */\n    const getFormData = (): any => {\n        const formData: any = {};\n\n        businessFields.forEach(config => {\n            const field = config.field;\n            const $input = $(`#${field}`);\n\n            if (config.readonly) {\n                return;\n            }\n\n            if ($input.length) {\n                if (config.type === 'checkbox') {\n                    formData[field] = $input.is(':checked');\n                } else if (config.type === 'select') {\n                    const val = $input.val();\n                    if (field === 'InternalExternal' || field === 'CourseStatus') {\n                        formData[field] = val ? parseInt(val) : 0;\n                    } else if (field === 'CourseTypeRefRecID' || field === 'ClassRoomRefRecID') {\n                        formData[field] = val ? parseInt(val) : null;\n                    } else {\n                        formData[field] = val || null;\n                    }\n                } else if (config.type === 'number') {\n                    const val = $input.val();\n                    formData[field] = val ? parseInt(val) : null;\n                } else if (config.type === 'datetime') {\n                    const val = $input.val();\n                    if (val) {\n                        formData[field] = new Date(val).toISOString();\n                    } else {\n                        formData[field] = null;\n                    }\n                } else {\n                    const val = $input.val();\n                    formData[field] = val || null;\n                }\n            }\n        });\n\n        return formData;\n    };\n\n    // ========================================================================\n    // GUARDADO DE CURSO\n    // ========================================================================\n\n    /**\n     * Guarda el curso en el API (POST para crear, PUT para actualizar).\n     * Muestra alertas de éxito o error y redirige al listado si es exitoso.\n     */\n    const saveCourse = async (): Promise<void> => {\n        const formData = getFormData();\n\n        try {\n            const url = isNew ? `${apiBase}/Courses` : `${apiBase}/Courses/${recId}`;\n            const method = isNew ? 'POST' : 'PUT';\n\n            const payload = {\n                CourseCode: formData.CourseCode,\n                Name: formData.Name,\n                CourseTypeRefRecID: formData.CourseTypeRefRecID,\n                ClassRoomRefRecID: formData.ClassRoomRefRecID,\n                Description: formData.Description || null,\n                StartDate: formData.StartDate,\n                EndDate: formData.EndDate,\n                IsMatrixTraining: formData.IsMatrixTraining,\n                InternalExternal: formData.InternalExternal,\n                MinStudents: formData.MinStudents,\n                MaxStudents: formData.MaxStudents,\n                Periodicity: formData.Periodicity,\n                QtySessions: formData.QtySessions,\n                Objetives: formData.Objetives || null,\n                Topics: formData.Topics || null,\n                CourseStatus: formData.CourseStatus,\n                Observations: formData.Observations || null\n            };\n\n            \n\n            await fetchJson(url, {\n                method: method,\n                body: JSON.stringify(payload)\n            });\n\n            (w as any).ALERTS.ok(\n                isNew ? 'Curso creado exitosamente' : 'Curso actualizado exitosamente',\n                'Éxito'\n            );\n\n            setTimeout(() => {\n                window.location.href = '/Course/LP_Courses';\n            }, 1500);\n\n        } catch (error: any) {\n            console.error('Error al guardar:', error);\n            let errorMessage = 'Error al guardar el curso';\n\n            try {\n                const errorData = JSON.parse(error.message);\n\n                if (errorData.errors) {\n                    const errorsArray: string[] = [];\n                    for (const key in errorData.errors) {\n                        if (errorData.errors.hasOwnProperty(key)) {\n                            const errList = errorData.errors[key];\n                            if (Array.isArray(errList)) {\n                                for (let i = 0; i < errList.length; i++) {\n                                    errorsArray.push(errList[i]);\n                                }\n                            } else {\n                                errorsArray.push(errList);\n                            }\n                        }\n                    }\n                    errorMessage = errorsArray.join(', ');\n                } else if (errorData.title) {\n                    errorMessage = errorData.title;\n                }\n            } catch {\n                errorMessage = error.message || errorMessage;\n            }\n\n            (w as any).ALERTS.error(errorMessage, 'Error');\n        }\n    };\n\n    // ========================================================================\n    // EVENT HANDLERS\n    // ========================================================================\n\n    /**\n     * Manejador del botón Guardar.\n     * Valida el formulario y ejecuta el guardado.\n     */\n    $('#btn-save').on('click', async () => {\n        const form = document.getElementById('frm-course') as HTMLFormElement;\n\n        if (!form.checkValidity()) {\n            form.reportValidity();\n            return;\n        }\n\n        await saveCourse();\n    });\n\n    // ========================================================================\n    // INICIALIZACIÓN\n    // ========================================================================\n\n    /**\n     * Función de inicialización que se ejecuta cuando el DOM está listo.\n     * Carga los datos de referencia, luego los datos del curso y renderiza los formularios.\n     */\n    $(async function () {\n        try {\n            // Cargar tipos de curso y salones en paralelo\n            await Promise.all([\n                loadCourseTypes(),\n                loadClassRooms()\n            ]);\n\n            // Luego cargar los datos del curso\n            await loadCourseData();\n        } catch (error) {\n            (w as any).ALERTS.error('Error al inicializar el formulario', 'Error');\n        }\n    });\n})();"]}