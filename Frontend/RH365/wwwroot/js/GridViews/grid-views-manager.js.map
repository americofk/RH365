{"version":3,"file":"grid-views-manager.js","sourceRoot":"","sources":["../../../TS/GridViews/grid-views-manager.ts"],"names":[],"mappings":"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","sourcesContent":["// ============================================================================\r\n// Archivo: grid-views-manager.ts\r\n// Proyecto: RH365.WebMVC\r\n// Ruta: TS/GridViews/grid-views-manager.ts\r\n// Descripción: Gestor de vistas de usuario - Comunicación con API\r\n// ============================================================================\r\n\r\ninterface ColumnConfig {\r\n    field: string;\r\n    visible: boolean;\r\n    order: number;\r\n    width?: number;\r\n}\r\n\r\ninterface ViewConfig {\r\n    columns: ColumnConfig[];\r\n    pageSize?: number;\r\n}\r\n\r\ninterface UserGridView {\r\n    RecID: number;\r\n    EntityName: string;\r\n    ViewName: string;\r\n    ViewType?: string;\r\n    ViewScope?: string;\r\n    IsDefault: boolean;\r\n    IsPublic: boolean;\r\n    ViewConfig: string;\r\n    UserRefRecID: number;\r\n    CreatedBy: string;\r\n    CreatedOn: string;\r\n}\r\n\r\nclass GridViewsManager {\r\n    private apiBase: string;\r\n    private token: string;\r\n    private entityName: string;\r\n    private userRefRecID: number;\r\n    private dataareaId: string;\r\n    private currentView: UserGridView | null = null;\r\n    private availableViews: UserGridView[] = [];\r\n\r\n    constructor(apiBase: string, token: string, entityName: string, userRefRecID: number, dataareaId: string) {\r\n        this.apiBase = apiBase;\r\n        this.token = token;\r\n        this.entityName = entityName;\r\n        this.userRefRecID = userRefRecID;\r\n        this.dataareaId = dataareaId;\r\n    }\r\n\r\n    async initialize(): Promise<ColumnConfig[]> {\r\n        await this.loadAvailableViews();\r\n        const defaultView = await this.loadDefaultView();\r\n        if (defaultView) {\r\n            this.currentView = defaultView;\r\n            return this.parseViewConfig(defaultView.ViewConfig);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private async loadDefaultView(): Promise<UserGridView | null> {\r\n        try {\r\n            const defaultView = this.availableViews.find(v =>\r\n                v.UserRefRecID === this.userRefRecID &&\r\n                v.IsDefault === true\r\n            );\r\n            return defaultView || null;\r\n        } catch (error) {\r\n            (window as any).ALERTS.error('Error al cargar vista predeterminada', 'Error');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private async loadAvailableViews(): Promise<void> {\r\n        try {\r\n            const url = `${this.apiBase}/UserGridViews?entityName=${this.entityName}&dataareaId=${this.dataareaId}`;\r\n\r\n            const response = await fetch(url, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${this.token}`,\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                throw new Error(`HTTP ${response.status}: ${errorText}`);\r\n            }\r\n\r\n            const result = await response.json();\r\n            let views: UserGridView[] = [];\r\n\r\n            if (result.items && Array.isArray(result.items)) {\r\n                views = result.items;\r\n            } else if (result.Data && Array.isArray(result.Data)) {\r\n                views = result.Data;\r\n            } else if (Array.isArray(result)) {\r\n                views = result;\r\n            }\r\n\r\n            this.availableViews = views.filter(v =>\r\n                v.UserRefRecID === this.userRefRecID || v.IsPublic\r\n            );\r\n\r\n        } catch (error) {\r\n            (window as any).ALERTS.error('Error al cargar las vistas disponibles', 'Error');\r\n            this.availableViews = [];\r\n        }\r\n    }\r\n\r\n    async saveView(viewName: string, columns: ColumnConfig[], isDefault: boolean = false, isPublic: boolean = false): Promise<boolean> {\r\n        try {\r\n            const viewConfig: ViewConfig = { columns };\r\n            const response = await fetch(`${this.apiBase}/UserGridViews`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': `Bearer ${this.token}`,\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    UserRefRecID: this.userRefRecID,\r\n                    EntityName: this.entityName,\r\n                    ViewName: viewName,\r\n                    ViewConfig: JSON.stringify(viewConfig),\r\n                    IsDefault: isDefault,\r\n                    IsPublic: isPublic,\r\n                    DataareaID: this.dataareaId,\r\n                    ViewType: 'Grid',\r\n                    ViewScope: isPublic ? 'Public' : 'Private',\r\n                    SchemaVersion: 1,\r\n                    IsLocked: false\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                throw new Error(`HTTP ${response.status}: ${errorText}`);\r\n            }\r\n\r\n            const savedView = await response.json();\r\n            this.currentView = savedView;\r\n            await this.loadAvailableViews();\r\n\r\n            (window as any).ALERTS.ok(`Vista \"${viewName}\" guardada exitosamente`, 'Éxito');\r\n            return true;\r\n\r\n        } catch (error) {\r\n            (window as any).ALERTS.error('Error al guardar la vista', 'Error');\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async updateView(columns: ColumnConfig[]): Promise<boolean> {\r\n        if (!this.currentView) {\r\n            (window as any).ALERTS.warn('No hay vista seleccionada para actualizar', 'Advertencia');\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const viewConfig: ViewConfig = { columns };\r\n            const response = await fetch(`${this.apiBase}/UserGridViews`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Authorization': `Bearer ${this.token}`,\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    RecID: this.currentView.RecID,\r\n                    DataareaID: this.dataareaId,\r\n                    UserRefRecID: this.currentView.UserRefRecID,\r\n                    EntityName: this.currentView.EntityName,\r\n                    ViewType: this.currentView.ViewType || 'Grid',\r\n                    ViewScope: this.currentView.ViewScope || 'Private',\r\n                    RoleRefRecID: null,\r\n                    ViewName: this.currentView.ViewName,\r\n                    ViewDescription: null,\r\n                    IsDefault: this.currentView.IsDefault,\r\n                    IsLocked: false,\r\n                    ViewConfig: JSON.stringify(viewConfig),\r\n                    SchemaVersion: 1,\r\n                    Checksum: null,\r\n                    Tags: null,\r\n                    Observations: null,\r\n                    ConcurrencyToken: null\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                throw new Error(`HTTP ${response.status}`);\r\n            }\r\n\r\n            const updated = await response.json();\r\n            this.currentView = updated;\r\n\r\n            (window as any).ALERTS.ok(`Vista \"${this.currentView.ViewName}\" actualizada`, 'Éxito');\r\n            return true;\r\n\r\n        } catch (error) {\r\n            (window as any).ALERTS.error('Error al actualizar la vista', 'Error');\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async setDefaultView(recId: number): Promise<boolean> {\r\n        try {\r\n            const url = `${this.apiBase}/UserGridViews/${recId}/set-default?dataareaId=${this.dataareaId}`;\r\n            const response = await fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': `Bearer ${this.token}`,\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                throw new Error(`HTTP ${response.status}`);\r\n            }\r\n\r\n            await this.loadAvailableViews();\r\n            (window as any).ALERTS.ok('Vista establecida como predeterminada', 'Éxito');\r\n            return true;\r\n\r\n        } catch (error) {\r\n            (window as any).ALERTS.error('Error al establecer vista predeterminada', 'Error');\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async deleteView(recId: number): Promise<boolean> {\r\n        try {\r\n            const url = `${this.apiBase}/UserGridViews/${recId}?dataareaId=${this.dataareaId}`;\r\n            const response = await fetch(url, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Authorization': `Bearer ${this.token}`,\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                throw new Error(`HTTP ${response.status}`);\r\n            }\r\n\r\n            await this.loadAvailableViews();\r\n\r\n            if (this.currentView && this.currentView.RecID === recId) {\r\n                this.currentView = null;\r\n            }\r\n\r\n            (window as any).ALERTS.ok('Vista eliminada exitosamente', 'Éxito');\r\n            return true;\r\n\r\n        } catch (error) {\r\n            (window as any).ALERTS.error('Error al eliminar la vista', 'Error');\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async loadView(recId: number): Promise<ColumnConfig[]> {\r\n        const view = this.availableViews.find(v => v.RecID === recId);\r\n\r\n        if (!view) {\r\n            (window as any).ALERTS.warn('Vista no encontrada', 'Advertencia');\r\n            return [];\r\n        }\r\n\r\n        this.currentView = view;\r\n        return this.parseViewConfig(view.ViewConfig);\r\n    }\r\n\r\n    private parseViewConfig(configJson: string): ColumnConfig[] {\r\n        try {\r\n            const config: ViewConfig = JSON.parse(configJson);\r\n            return config.columns || [];\r\n        } catch (error) {\r\n            (window as any).ALERTS.error('Error al cargar configuración de vista', 'Error');\r\n            return [];\r\n        }\r\n    }\r\n\r\n    getAvailableViews(): UserGridView[] {\r\n        return this.availableViews;\r\n    }\r\n\r\n    getCurrentView(): UserGridView | null {\r\n        return this.currentView;\r\n    }\r\n\r\n    getCurrentViewName(): string {\r\n        return this.currentView ? this.currentView.ViewName : 'Vista por defecto';\r\n    }\r\n\r\n    hasCurrentView(): boolean {\r\n        return this.currentView !== null;\r\n    }\r\n}\r\n\r\n(window as any).GridViewsManager = GridViewsManager;"]}