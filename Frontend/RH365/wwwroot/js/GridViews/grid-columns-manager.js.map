{"version":3,"file":"grid-columns-manager.js","sourceRoot":"","sources":["../../../TS/GridViews/grid-columns-manager.ts"],"names":[],"mappings":"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","sourcesContent":["// ============================================================================\r\n// Archivo: grid-columns-manager.ts\r\n// Proyecto: RH365.WebMVC\r\n// Ruta: TS/GridViews/grid-columns-manager.ts\r\n// Descripci�n: Gestor de columnas - UI y eventos (modales, drag & drop)\r\n// ============================================================================\r\n\r\ninterface ColumnConfig {\r\n    field: string;\r\n    visible: boolean;\r\n    order: number;\r\n    width?: number;\r\n}\r\n\r\nclass GridColumnsManager {\r\n    private allColumns: string[];\r\n    private visibleColumns: string[];\r\n    private onColumnsChanged: (columns: string[]) => void;\r\n\r\n    constructor(allColumns: string[], visibleColumns: string[], onColumnsChanged: (columns: string[]) => void) {\r\n        this.allColumns = allColumns;\r\n        this.visibleColumns = visibleColumns;\r\n        this.onColumnsChanged = onColumnsChanged;\r\n    }\r\n\r\n    /**\r\n     * Mostrar modal para gestionar columnas\r\n     */\r\n    showColumnsModal(): void {\r\n        const modal = $('#modal-manage-columns');\r\n        const columnsList = $('#columns-list');\r\n\r\n        // Limpiar lista\r\n        columnsList.empty();\r\n\r\n        // Crear items de columnas ordenados\r\n        const sortedColumns = [...this.allColumns].sort((a, b) => {\r\n            const indexA = this.visibleColumns.indexOf(a);\r\n            const indexB = this.visibleColumns.indexOf(b);\r\n\r\n            if (indexA === -1 && indexB === -1) return 0;\r\n            if (indexA === -1) return 1;\r\n            if (indexB === -1) return -1;\r\n\r\n            return indexA - indexB;\r\n        });\r\n\r\n        sortedColumns.forEach(column => {\r\n            const isVisible = this.visibleColumns.includes(column);\r\n            const columnName = this.formatColumnName(column);\r\n\r\n            const item = $(`\r\n                <div class=\"column-item\" data-field=\"${column}\">\r\n                    <span class=\"drag-handle\">\r\n                        <i class=\"fa fa-bars\"></i>\r\n                    </span>\r\n                    <input type=\"checkbox\" class=\"column-checkbox\" ${isVisible ? 'checked' : ''}>\r\n                    <span class=\"column-name\">${columnName}</span>\r\n                </div>\r\n            `);\r\n\r\n            columnsList.append(item);\r\n        });\r\n\r\n        // Inicializar sortable (drag & drop)\r\n        this.initializeSortable(columnsList);\r\n\r\n        // Mostrar modal\r\n        (modal as any).modal('show');\r\n    }\r\n\r\n    /**\r\n     * Inicializar drag & drop con jQuery UI\r\n     */\r\n    private initializeSortable(container: JQuery): void {\r\n        if (typeof ($ as any).ui === 'undefined') {\r\n            (window as any).ALERTS.warn('jQuery UI no est� disponible. Drag & drop deshabilitado.', 'Advertencia');\r\n            return;\r\n        }\r\n\r\n        container.sortable({\r\n            handle: '.drag-handle',\r\n            cursor: 'move',\r\n            opacity: 0.6\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Aplicar cambios de columnas\r\n     */\r\n    applyColumns(): ColumnConfig[] {\r\n        const newVisibleColumns: string[] = [];\r\n        const columnConfigs: ColumnConfig[] = [];\r\n\r\n        $('#columns-list .column-item').each((index, element) => {\r\n            const $item = $(element);\r\n            const field = $item.data('field');\r\n            const isChecked = $item.find('.column-checkbox').is(':checked');\r\n\r\n            const config: ColumnConfig = {\r\n                field: field,\r\n                visible: isChecked,\r\n                order: index\r\n            };\r\n\r\n            columnConfigs.push(config);\r\n\r\n            if (isChecked) {\r\n                newVisibleColumns.push(field);\r\n            }\r\n        });\r\n\r\n        this.visibleColumns = newVisibleColumns;\r\n\r\n        // Notificar cambio\r\n        this.onColumnsChanged(newVisibleColumns);\r\n\r\n        return columnConfigs;\r\n    }\r\n\r\n    /**\r\n     * Formatear nombre de columna para mostrar\r\n     */\r\n    private formatColumnName(field: string): string {\r\n        const translations: Record<string, string> = {\r\n            'RecID': 'ID Registro',\r\n            'ID': 'ID Sistema',\r\n            'ProjectCode': 'C�digo Proyecto',\r\n            'Name': 'Nombre',\r\n            'LedgerAccount': 'Cuenta Contable',\r\n            'ProjectStatus': 'Estado',\r\n            'DataareaID': 'Empresa',\r\n            'CreatedBy': 'Creado Por',\r\n            'CreatedOn': 'Fecha Creaci�n',\r\n            'ModifiedBy': 'Modificado Por',\r\n            'ModifiedOn': 'Fecha Modificaci�n',\r\n            'Observations': 'Observaciones'\r\n        };\r\n\r\n        return translations[field] || field\r\n            .replace(/([a-z])([A-Z])/g, '$1 $2')\r\n            .replace(/_/g, ' ')\r\n            .replace(/^./, (c) => c.toUpperCase());\r\n    }\r\n\r\n    /**\r\n     * Obtener columnas visibles actuales\r\n     */\r\n    getVisibleColumns(): string[] {\r\n        return this.visibleColumns;\r\n    }\r\n\r\n    /**\r\n     * Obtener todas las columnas\r\n     */\r\n    getAllColumns(): string[] {\r\n        return this.allColumns;\r\n    }\r\n\r\n    /**\r\n     * Convertir columnas actuales a ColumnConfig\r\n     */\r\n    getCurrentColumnConfig(): ColumnConfig[] {\r\n        return this.visibleColumns.map((field, index) => ({\r\n            field: field,\r\n            visible: true,\r\n            order: index\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Aplicar configuraci�n de columnas desde vista guardada\r\n     */\r\n    applyColumnConfig(config: ColumnConfig[]): void {\r\n        if (!config || config.length === 0) return;\r\n\r\n        // Ordenar por orden y filtrar visibles\r\n        const sortedVisible = config\r\n            .filter(c => c.visible)\r\n            .sort((a, b) => a.order - b.order)\r\n            .map(c => c.field);\r\n\r\n        if (sortedVisible.length > 0) {\r\n            this.visibleColumns = sortedVisible;\r\n            this.onColumnsChanged(sortedVisible);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restablecer a columnas por defecto\r\n     */\r\n    resetToDefault(defaultColumns: string[]): void {\r\n        this.visibleColumns = [...defaultColumns];\r\n        this.onColumnsChanged(defaultColumns);\r\n    }\r\n}\r\n\r\n// Exportar para uso global\r\n(window as any).GridColumnsManager = GridColumnsManager;"]}