{"version":3,"file":"project-form.js","sourceRoot":"","sources":["../../../TS/Projects/project-form.ts"],"names":[],"mappings":"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","sourcesContent":["// ============================================================================\r\n// Archivo: project-form.ts\r\n// Proyecto: RH365.WebMVC\r\n// Ruta: TS/Projects/project-form.ts\r\n// Descripción: \r\n//   - Formulario dinámico para Crear/Editar Proyectos\r\n//   - Tab General: Campos de negocio en LAYOUT DE 2 COLUMNAS\r\n//   - Tab Auditoría: Campos ISO 27001 en 1 columna\r\n//   - Renderizado separado para cada tab\r\n//   - Validación cliente + servidor\r\n//   - Integración con API REST (/api/Projects)\r\n//   - Labels a la izquierda de los campos\r\n// ============================================================================\r\n\r\n(function () {\r\n    // ========================================================================\r\n    // CONFIGURACIÓN GLOBAL Y CONTEXTO\r\n    // ========================================================================\r\n    const w: any = window;\r\n    const d: Document = document;\r\n    const $: any = w.jQuery || w.$;\r\n\r\n    const apiBase: string = w.RH365.urls.apiBase;\r\n    const pageContainer = d.querySelector(\"#project-form-page\");\r\n\r\n    // Si no existe el contenedor, salir\r\n    if (!pageContainer) return;\r\n\r\n    // Extraer datos del DOM\r\n    const token: string = pageContainer.getAttribute(\"data-token\") || \"\";\r\n    const dataareaId: string = pageContainer.getAttribute(\"data-dataarea\") || \"DAT\";\r\n    const userRefRecID: number = parseInt(pageContainer.getAttribute(\"data-user\") || \"0\", 10);\r\n    const recId: number = parseInt(pageContainer.getAttribute(\"data-recid\") || \"0\", 10);\r\n    const isNew: boolean = pageContainer.getAttribute(\"data-isnew\") === \"true\";\r\n\r\n    // ========================================================================\r\n    // INTERFACES Y TIPOS\r\n    // ========================================================================\r\n\r\n    /**\r\n     * Configuración de un campo del formulario.\r\n     * Define cómo se debe renderizar y validar cada campo.\r\n     */\r\n    interface FieldConfig {\r\n        field: string;\r\n        label: string;\r\n        type: 'text' | 'number' | 'date' | 'datetime' | 'textarea' | 'select' | 'checkbox';\r\n        required?: boolean;\r\n        maxLength?: number;\r\n        options?: { value: string; text: string }[];\r\n        placeholder?: string;\r\n        helpText?: string;\r\n        readonly?: boolean;\r\n        column?: 'left' | 'right';\r\n    }\r\n\r\n    // ========================================================================\r\n    // DEFINICIÓN DE CAMPOS - TAB GENERAL (Campos de Negocio en 2 COLUMNAS)\r\n    // ========================================================================\r\n    const businessFields: FieldConfig[] = [\r\n        // COLUMNA IZQUIERDA\r\n        {\r\n            field: 'ProjectCode',\r\n            label: 'Código Proyecto',\r\n            type: 'text',\r\n            required: true,\r\n            maxLength: 50,\r\n            placeholder: 'PRJ-001',\r\n            column: 'left'\r\n        },\r\n        {\r\n            field: 'Name',\r\n            label: 'Nombre',\r\n            type: 'text',\r\n            required: true,\r\n            maxLength: 200,\r\n            column: 'left'\r\n        },\r\n        {\r\n            field: 'Observations',\r\n            label: 'Observaciones',\r\n            type: 'textarea',\r\n            maxLength: 500,\r\n            column: 'left'\r\n        },\r\n\r\n        // COLUMNA DERECHA\r\n        {\r\n            field: 'LedgerAccount',\r\n            label: 'Cuenta Contable',\r\n            type: 'text',\r\n            maxLength: 50,\r\n            placeholder: '1.01.001',\r\n            column: 'right'\r\n        },\r\n        {\r\n            field: 'ProjectStatus',\r\n            label: 'Estado del Proyecto',\r\n            type: 'select',\r\n            required: true,\r\n            options: [\r\n                { value: 'true', text: 'Activo' },\r\n                { value: 'false', text: 'Inactivo' }\r\n            ],\r\n            column: 'right'\r\n        }\r\n    ];\r\n\r\n    // ========================================================================\r\n    // DEFINICIÓN DE CAMPOS - TAB AUDITORÍA (SOLO ISO 27001)\r\n    // ========================================================================\r\n    const auditFields: FieldConfig[] = [\r\n        {\r\n            field: 'RecID',\r\n            label: 'RecID (Clave Primaria)',\r\n            type: 'number',\r\n            readonly: true,\r\n        },\r\n        {\r\n            field: 'ID',\r\n            label: 'ID Sistema',\r\n            type: 'text',\r\n            readonly: true,\r\n        },\r\n        {\r\n            field: 'DataareaID',\r\n            label: 'Empresa (DataareaID)',\r\n            type: 'text',\r\n            readonly: true,\r\n        },\r\n        {\r\n            field: 'CreatedBy',\r\n            label: 'Creado Por',\r\n            type: 'text',\r\n            readonly: true,\r\n        },\r\n        {\r\n            field: 'CreatedOn',\r\n            label: 'Fecha de Creación',\r\n            type: 'datetime',\r\n            readonly: true,\r\n        },\r\n        {\r\n            field: 'ModifiedBy',\r\n            label: 'Modificado Por',\r\n            type: 'text',\r\n            readonly: true,\r\n        },\r\n        {\r\n            field: 'ModifiedOn',\r\n            label: 'Fecha de Última Modificación',\r\n            type: 'datetime',\r\n            readonly: true,\r\n        }\r\n    ];\r\n\r\n    // Variable global para almacenar los datos del proyecto cargados desde el API\r\n    let projectData: any = null;\r\n\r\n    // ========================================================================\r\n    // UTILIDADES - COMUNICACIÓN CON API\r\n    // ========================================================================\r\n\r\n    /**\r\n     * Realiza una petición HTTP al API con manejo de autenticación.\r\n     * @param url URL completa del endpoint\r\n     * @param options Opciones adicionales para fetch (method, body, etc.)\r\n     * @returns Promise con la respuesta JSON parseada\r\n     */\r\n    const fetchJson = async (url: string, options?: RequestInit): Promise<any> => {\r\n        const headers: Record<string, string> = {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        };\r\n\r\n        // Agregar token de autenticación si existe\r\n        if (token) {\r\n            headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n\r\n        const response = await fetch(url, { ...options, headers });\r\n\r\n        // Si la respuesta no es exitosa, lanzar error con el detalle\r\n        if (!response.ok) {\r\n            const errorData = await response.json().catch(() => ({}));\r\n            throw new Error(JSON.stringify(errorData));\r\n        }\r\n\r\n        return response.json();\r\n    };\r\n\r\n    // ========================================================================\r\n    // RENDERIZADO DE CAMPOS\r\n    // ========================================================================\r\n\r\n    /**\r\n     * Genera el HTML de un campo según su configuración.\r\n     * Labels siempre a la izquierda del campo.\r\n     * @param config Configuración del campo\r\n     * @param value Valor actual del campo\r\n     * @param is2Column Si es true, ajusta las clases para layout de 2 columnas\r\n     * @returns String con el HTML del campo\r\n     */\r\n    const renderField = (config: FieldConfig, value: any, is2Column: boolean = false): string => {\r\n        const fieldId = config.field;\r\n        const fieldName = config.field;\r\n\r\n        // Labels SIEMPRE a la izquierda\r\n        // Para layout de 2 columnas: label más ancho (col-md-4)\r\n        // Para layout de 1 columna: label estándar (col-md-3)\r\n        const labelClass = is2Column\r\n            ? 'control-label col-md-4 col-sm-4 col-xs-12'\r\n            : 'control-label col-md-3 col-sm-3 col-xs-12';\r\n\r\n        const inputContainerClass = is2Column\r\n            ? 'col-md-8 col-sm-8 col-xs-12'\r\n            : 'col-md-6 col-sm-6 col-xs-12';\r\n\r\n        const requiredMark = config.required ? '<span class=\"required\">*</span>' : '';\r\n        const readonlyAttr = config.readonly ? 'readonly' : '';\r\n        const requiredAttr = config.required ? 'required' : '';\r\n\r\n        let inputHtml = '';\r\n        let displayValue = value ?? '';\r\n\r\n        // Generar input según el tipo de campo\r\n        switch (config.type) {\r\n            case 'textarea':\r\n                inputHtml = `<textarea id=\"${fieldId}\" name=\"${fieldName}\" class=\"form-control\" rows=\"3\" maxlength=\"${config.maxLength || 500}\" ${readonlyAttr} ${requiredAttr}>${displayValue}</textarea>`;\r\n                break;\r\n\r\n            case 'select':\r\n                const options = config.options || [];\r\n                const optionsHtml = options.map(opt =>\r\n                    `<option value=\"${opt.value}\" ${displayValue.toString() === opt.value ? 'selected' : ''}>${opt.text}</option>`\r\n                ).join('');\r\n                inputHtml = `<select id=\"${fieldId}\" name=\"${fieldName}\" class=\"form-control\" ${readonlyAttr ? 'disabled' : ''} ${requiredAttr}>${optionsHtml}</select>`;\r\n                break;\r\n\r\n            case 'checkbox':\r\n                const checked = displayValue === true || displayValue === 'true' ? 'checked' : '';\r\n                inputHtml = `<input type=\"checkbox\" id=\"${fieldId}\" name=\"${fieldName}\" class=\"flat\" ${checked} ${readonlyAttr ? 'disabled' : ''}>`;\r\n                break;\r\n\r\n            case 'datetime':\r\n                // Formatear datetime para visualización\r\n                if (displayValue && typeof displayValue === 'string' && /^\\d{4}-\\d{2}-\\d{2}T/.test(displayValue)) {\r\n                    displayValue = new Date(displayValue).toLocaleString('es-DO', {\r\n                        year: 'numeric',\r\n                        month: '2-digit',\r\n                        day: '2-digit',\r\n                        hour: '2-digit',\r\n                        minute: '2-digit',\r\n                        second: '2-digit'\r\n                    });\r\n                }\r\n                inputHtml = `<input type=\"text\" id=\"${fieldId}\" name=\"${fieldName}\" class=\"form-control\" value=\"${displayValue}\" ${readonlyAttr} ${requiredAttr}>`;\r\n                break;\r\n\r\n            case 'date':\r\n                // Extraer solo la fecha (YYYY-MM-DD) si viene datetime\r\n                if (displayValue && typeof displayValue === 'string' && /^\\d{4}-\\d{2}-\\d{2}T/.test(displayValue)) {\r\n                    displayValue = displayValue.split('T')[0];\r\n                }\r\n                inputHtml = `<input type=\"date\" id=\"${fieldId}\" name=\"${fieldName}\" class=\"form-control\" value=\"${displayValue}\" ${readonlyAttr} ${requiredAttr}>`;\r\n                break;\r\n\r\n            case 'number':\r\n                inputHtml = `<input type=\"number\" id=\"${fieldId}\" name=\"${fieldName}\" class=\"form-control\" value=\"${displayValue}\" ${readonlyAttr} ${requiredAttr}>`;\r\n                break;\r\n\r\n            default: // text\r\n                inputHtml = `<input type=\"text\" id=\"${fieldId}\" name=\"${fieldName}\" class=\"form-control\" maxlength=\"${config.maxLength || 255}\" value=\"${displayValue}\" placeholder=\"${config.placeholder || ''}\" ${readonlyAttr} ${requiredAttr}>`;\r\n                break;\r\n        }\r\n\r\n        // Agregar texto de ayuda si existe\r\n        const helpTextHtml = config.helpText ? `<span class=\"help-block\">${config.helpText}</span>` : '';\r\n\r\n        // Retornar el HTML completo del form-group\r\n        return `\r\n            <div class=\"form-group\">\r\n                <label class=\"${labelClass}\" for=\"${fieldId}\">\r\n                    ${config.label} ${requiredMark}\r\n                </label>\r\n                <div class=\"${inputContainerClass}\">\r\n                    ${inputHtml}\r\n                    ${helpTextHtml}\r\n                </div>\r\n            </div>\r\n        `;\r\n    };\r\n\r\n    // ========================================================================\r\n    // CARGA DE DATOS DEL PROYECTO\r\n    // ========================================================================\r\n\r\n    /**\r\n     * Carga los datos del proyecto desde el API (solo si es edición).\r\n     * En modo creación, renderiza los formularios vacíos.\r\n     */\r\n    const loadProjectData = async (): Promise<void> => {\r\n        if (isNew) {\r\n            // Modo creación: renderizar formularios vacíos\r\n            renderBusinessForm({});\r\n            renderAuditForm({});\r\n            return;\r\n        }\r\n\r\n        // Modo edición: cargar datos desde el API\r\n        try {\r\n            const url = `${apiBase}/Projects/${recId}`;\r\n            projectData = await fetchJson(url);\r\n\r\n            // Renderizar ambos formularios con los datos cargados\r\n            renderBusinessForm(projectData);\r\n            renderAuditForm(projectData);\r\n        } catch (error) {\r\n            (w as any).ALERTS.error('Error al cargar los datos del proyecto', 'Error');\r\n\r\n            // Renderizar formularios vacíos en caso de error\r\n            renderBusinessForm({});\r\n            renderAuditForm({});\r\n        }\r\n    };\r\n\r\n    // ========================================================================\r\n    // RENDERIZADO DE FORMULARIOS\r\n    // ========================================================================\r\n\r\n    /**\r\n     * Renderiza el formulario de campos de negocio en LAYOUT DE 2 COLUMNAS.\r\n     * Separa los campos según la propiedad 'column' de cada FieldConfig.\r\n     * @param data Datos del proyecto a mostrar\r\n     */\r\n    const renderBusinessForm = (data: any): void => {\r\n        const containerLeft = $('#dynamic-fields-col-left');\r\n        const containerRight = $('#dynamic-fields-col-right');\r\n\r\n        containerLeft.empty();\r\n        containerRight.empty();\r\n\r\n        // Renderizar campos en columna izquierda\r\n        businessFields\r\n            .filter(config => config.column === 'left')\r\n            .forEach(config => {\r\n                const value = data[config.field];\r\n                const fieldHtml = renderField(config, value, true); // true = layout 2 columnas\r\n                containerLeft.append(fieldHtml);\r\n            });\r\n\r\n        // Renderizar campos en columna derecha\r\n        businessFields\r\n            .filter(config => config.column === 'right')\r\n            .forEach(config => {\r\n                const value = data[config.field];\r\n                const fieldHtml = renderField(config, value, true); // true = layout 2 columnas\r\n                containerRight.append(fieldHtml);\r\n            });\r\n\r\n        // Inicializar iCheck para checkboxes si existe el plugin\r\n        if ($.fn.iCheck) {\r\n            $('.flat').iCheck({\r\n                checkboxClass: 'icheckbox_flat-green'\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Renderiza el formulario de campos de auditoría (Tab Auditoría).\r\n     * SOLO renderiza los campos definidos en auditFields.\r\n     * @param data Datos del proyecto a mostrar\r\n     */\r\n    const renderAuditForm = (data: any): void => {\r\n        const container = $('#audit-fields-container');\r\n        container.empty();\r\n\r\n        // Si es modo creación, mostrar mensaje informativo\r\n        if (isNew) {\r\n            container.html(`\r\n                <div class=\"alert alert-warning\" role=\"alert\">\r\n                    <i class=\"fa fa-info-circle\"></i>\r\n                    <strong>Modo Creación:</strong> \r\n                    Los campos de auditoría se generarán automáticamente después de guardar el proyecto.\r\n                </div>\r\n            `);\r\n            return;\r\n        }\r\n\r\n        // Renderizar SOLO los campos de auditoría\r\n        auditFields.forEach(config => {\r\n            const value = data[config.field];\r\n            const fieldHtml = renderField(config, value, false); // false = layout normal 1 columna\r\n            container.append(fieldHtml);\r\n        });\r\n    };\r\n\r\n    // ========================================================================\r\n    // CAPTURA DE DATOS DEL FORMULARIO\r\n    // ========================================================================\r\n\r\n    /**\r\n     * Obtiene los datos del formulario de negocio para enviar al API.\r\n     * SOLO captura campos editables del Tab General (businessFields).\r\n     * @returns Objeto con los datos del formulario\r\n     */\r\n    const getFormData = (): any => {\r\n        const formData: any = {};\r\n\r\n        // Iterar SOLO sobre businessFields (no auditFields)\r\n        businessFields.forEach(config => {\r\n            const field = config.field;\r\n            const $input = $(`#${field}`);\r\n\r\n            // Saltar campos readonly\r\n            if (config.readonly) {\r\n                return;\r\n            }\r\n\r\n            if ($input.length) {\r\n                if (config.type === 'checkbox') {\r\n                    // Capturar valor booleano de checkbox\r\n                    formData[field] = $input.is(':checked');\r\n                } else if (config.type === 'select' && field === 'ProjectStatus') {\r\n                    // Convertir string \"true\"/\"false\" a boolean para ProjectStatus\r\n                    const val = $input.val();\r\n                    formData[field] = val === 'true';\r\n                } else if (config.type === 'number') {\r\n                    // Convertir a número o null\r\n                    const val = $input.val();\r\n                    formData[field] = val ? parseFloat(val) : null;\r\n                } else {\r\n                    // Capturar como string o null\r\n                    const val = $input.val();\r\n                    formData[field] = val || null;\r\n                }\r\n            }\r\n        });\r\n\r\n        return formData;\r\n    };\r\n\r\n    // ========================================================================\r\n    // GUARDADO DE PROYECTO\r\n    // ========================================================================\r\n\r\n    /**\r\n     * Guarda el proyecto en el API (POST para crear, PUT para actualizar).\r\n     * Muestra alertas de éxito o error y redirige al listado si es exitoso.\r\n     */\r\n    const saveProject = async (): Promise<void> => {\r\n        const formData = getFormData();\r\n\r\n        try {\r\n            // Determinar URL y método según el modo (crear/editar)\r\n            const url = isNew ? `${apiBase}/Projects` : `${apiBase}/Projects/${recId}`;\r\n            const method = isNew ? 'POST' : 'PUT';\r\n\r\n            // Construir payload con los campos necesarios\r\n            const payload = {\r\n                ProjectCode: formData.ProjectCode,\r\n                Name: formData.Name,\r\n                LedgerAccount: formData.LedgerAccount || null,\r\n                ProjectStatus: formData.ProjectStatus,\r\n                Observations: formData.Observations || null\r\n            };\r\n\r\n            // Debug en consola\r\n            console.log('FormData capturado:', formData);\r\n            console.log('Enviando payload:', payload);\r\n\r\n            // Enviar petición al API\r\n            await fetchJson(url, {\r\n                method: method,\r\n                body: JSON.stringify(payload)\r\n            });\r\n\r\n            // Mostrar alerta de éxito\r\n            (w as any).ALERTS.ok(\r\n                isNew ? 'Proyecto creado exitosamente' : 'Proyecto actualizado exitosamente',\r\n                'Éxito'\r\n            );\r\n\r\n            // Redirigir al listado después de 1.5 segundos\r\n            setTimeout(() => {\r\n                window.location.href = '/Project/LP_Projects';\r\n            }, 1500);\r\n\r\n        } catch (error: any) {\r\n            console.error('Error al guardar:', error);\r\n            let errorMessage = 'Error al guardar el proyecto';\r\n\r\n            // Intentar parsear el mensaje de error del API\r\n            try {\r\n                const errorData = JSON.parse(error.message);\r\n\r\n                // Si hay errores de validación, construir mensaje detallado\r\n                if (errorData.errors) {\r\n                    const errorsArray: string[] = [];\r\n                    for (const key in errorData.errors) {\r\n                        if (errorData.errors.hasOwnProperty(key)) {\r\n                            const errList = errorData.errors[key];\r\n                            if (Array.isArray(errList)) {\r\n                                for (let i = 0; i < errList.length; i++) {\r\n                                    errorsArray.push(errList[i]);\r\n                                }\r\n                            } else {\r\n                                errorsArray.push(errList);\r\n                            }\r\n                        }\r\n                    }\r\n                    errorMessage = errorsArray.join(', ');\r\n                } else if (errorData.title) {\r\n                    errorMessage = errorData.title;\r\n                }\r\n            } catch {\r\n                // Si no se puede parsear, usar el mensaje original\r\n                errorMessage = error.message || errorMessage;\r\n            }\r\n\r\n            // Mostrar alerta de error\r\n            (w as any).ALERTS.error(errorMessage, 'Error');\r\n        }\r\n    };\r\n\r\n    // ========================================================================\r\n    // EVENT HANDLERS\r\n    // ========================================================================\r\n\r\n    /**\r\n     * Manejador del botón Guardar.\r\n     * Valida el formulario y ejecuta el guardado.\r\n     */\r\n    $('#btn-save').on('click', async () => {\r\n        const form = document.getElementById('frm-project') as HTMLFormElement;\r\n\r\n        // Validar campos requeridos del formulario\r\n        if (!form.checkValidity()) {\r\n            form.reportValidity();\r\n            return;\r\n        }\r\n\r\n        // Ejecutar guardado\r\n        await saveProject();\r\n    });\r\n\r\n    // ========================================================================\r\n    // INICIALIZACIÓN\r\n    // ========================================================================\r\n\r\n    /**\r\n     * Función de inicialización que se ejecuta cuando el DOM está listo.\r\n     * Carga los datos del proyecto y renderiza los formularios.\r\n     */\r\n    $(async function () {\r\n        try {\r\n            await loadProjectData();\r\n        } catch (error) {\r\n            (w as any).ALERTS.error('Error al inicializar el formulario', 'Error');\r\n        }\r\n    });\r\n})();"]}