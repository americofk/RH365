// <auto-generated />
using System;
using D365_API_Nomina.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace D365_API_Nomina.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20210908193130_des-51")]
    partial class des51
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.HasSequence<int>("ClassRoomId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("CourseId")
                .HasMin(1L)
                .HasMax(999999L);

            modelBuilder.HasSequence<int>("CourseLocationId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("CourseTypeId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("DeductionCodeId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("DepartmentId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("EarningCodeId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("EmployeeId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("IntructorId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("JobId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("LoanId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("MenuId")
                .HasMin(1L)
                .HasMax(9999L);

            modelBuilder.HasSequence<int>("PayrollId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("PayrollProcessId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("PositionId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("ProcessDetailsId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("ProjCategoryId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("ProjId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.ClassRoom", b =>
                {
                    b.Property<string>("ClassRoomId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.ClassRoomId),'CR-00000000#')");

                    b.Property<int>("AvailableTimeEnd")
                        .HasColumnType("int");

                    b.Property<int>("AvailableTimeStart")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CourseLocationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("MaxStudentQty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClassRoomId");

                    b.HasIndex("CourseLocationId");

                    b.ToTable("ClassRooms");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.CompaniesAssignedToUser", b =>
                {
                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Alias", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompaniesAssignedToUsers");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Company", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CompanyLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Responsible")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = "Root",
                            Email = "",
                            Name = "Empresa raiz",
                            Responsible = "Administrator"
                        });
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Country", b =>
                {
                    b.Property<string>("CountryId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = "DOM",
                            Name = "República Dominicana"
                        },
                        new
                        {
                            CountryId = "CH",
                            Name = "Chile"
                        });
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.CourseId),'CO-00000000#')");

                    b.Property<string>("ClassRoomId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CourseParentId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CourseStatus")
                        .HasColumnType("int");

                    b.Property<string>("CourseTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InternalExternal")
                        .HasColumnType("int");

                    b.Property<bool>("IsMatrixTraining")
                        .HasColumnType("bit");

                    b.Property<int>("MaxStudents")
                        .HasColumnType("int");

                    b.Property<int>("MinStudents")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Objetives")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Periodicity")
                        .HasColumnType("int");

                    b.Property<int>("QtySessions")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Topics")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("CourseId");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("CourseTypeId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.CourseEmployee", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("CourseId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("CourseEmployees");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.CourseInstructor", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("InstructorId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("CourseId", "InstructorId");

                    b.HasIndex("InstructorId");

                    b.ToTable("CourseInstructors");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.CourseLocation", b =>
                {
                    b.Property<string>("CourseLocationId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.CourseLocationId),'CLT-00000000#')");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CourseLocationId");

                    b.ToTable("CourseLocations");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.CoursePosition", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PositionId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("CourseId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("CoursePositions");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.CourseType", b =>
                {
                    b.Property<string>("CourseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.CourseTypeId),'CT-00000000#')");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CourseTypeId");

                    b.ToTable("CourseTypes");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Currency", b =>
                {
                    b.Property<string>("CurrencyId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            CurrencyId = "USD",
                            Name = "Dólares"
                        },
                        new
                        {
                            CurrencyId = "DOP",
                            Name = "Pesos Dominicanos"
                        });
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.DeductionCode", b =>
                {
                    b.Property<string>("DeductionCodeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.DeductionCodeId),'D-00000000#')");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Ctbution_IndexBase")
                        .HasColumnType("int");

                    b.Property<decimal>("Ctbution_LimitAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Ctbution_LimitPeriod")
                        .HasColumnType("int");

                    b.Property<decimal>("Ctbution_MultiplyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Ctbution_PayFrecuency")
                        .HasColumnType("int");

                    b.Property<int>("Dduction_IndexBase")
                        .HasColumnType("int");

                    b.Property<decimal>("Dduction_LimitAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Dduction_LimitPeriod")
                        .HasColumnType("int");

                    b.Property<decimal>("Dduction_MultiplyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Dduction_PayFrecuency")
                        .HasColumnType("int");

                    b.Property<bool>("DeductionStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Department")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("LedgerAccount")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PayrollAction")
                        .HasColumnType("int");

                    b.Property<string>("ProjCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("DeductionCodeId");

                    b.ToTable("DeductionCodes");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.DepartmentId),'DPT-00000000#')");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DepartamentStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("QtyWorkers")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EarningCode", b =>
                {
                    b.Property<string>("EarningCodeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.EarningCodeId),'EC-00000000#')");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("EarningCodeStatus")
                        .HasColumnType("bit");

                    b.Property<int>("IndexBase")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExtraHours")
                        .HasColumnType("bit");

                    b.Property<bool>("IsISR")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTSS")
                        .HasColumnType("bit");

                    b.Property<string>("LedgerAccount")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MultiplyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProjId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("EarningCodeId");

                    b.ToTable("EarningCodes");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.EmployeeId),'EMP-00000000#')");

                    b.Property<string>("AFP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ARS")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("BreakWorkFrom")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("BreakWorkTo")
                        .HasColumnType("time");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DependentsNumbers")
                        .HasColumnType("int");

                    b.Property<bool>("EmployeeStatus")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeType")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndWorkDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("HasDisability")
                        .HasColumnType("bit");

                    b.Property<bool>("HomeOffice")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("NSS")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("OwnCar")
                        .HasColumnType("bit");

                    b.Property<int>("PayMethod")
                        .HasColumnType("int");

                    b.Property<string>("PersonalTreatment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartWorkDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("WorkFrom")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("WorkTo")
                        .HasColumnType("time");

                    b.HasKey("EmployeeId");

                    b.HasIndex("Country");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeAddress", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("InternalId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Home")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("bit");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EmployeeId", "InternalId");

                    b.HasIndex("CountryId");

                    b.ToTable("EmployeesAddress");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeBankAccount", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("InternalId")
                        .HasColumnType("int");

                    b.Property<string>("AccountNum")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Currency")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("bit");

                    b.HasKey("EmployeeId", "InternalId");

                    b.ToTable("EmployeeBankAccounts");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeContactInf", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("InternalId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ContactType")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("bit");

                    b.Property<string>("NumberAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("EmployeeId", "InternalId");

                    b.ToTable("EmployeeContactsInf");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeDeductionCode", b =>
                {
                    b.Property<string>("DeductionCodeId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PayrollId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("IndexDeduction")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PercentContribution")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PercentDeduction")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DeductionCodeId", "EmployeeId", "PayrollId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollId");

                    b.ToTable("EmployeeDeductionCodes");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeDepartment", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("EmployeeDepartmentStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeId", "DepartmentId");

                    b.ToTable("EmployeeDepartments");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeDocument", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("InternalId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("DocumentType")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileAttach")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("bit");

                    b.HasKey("EmployeeId", "InternalId");

                    b.ToTable("EmployeeDocuments");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeEarningCode", b =>
                {
                    b.Property<string>("EarningCodeId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PayrollId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("IndexEarning")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("IndexEarningMonthly")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PayFrecuency")
                        .HasColumnType("int");

                    b.Property<int>("QtyPeriodForPaid")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StartPeriodForPaid")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EarningCodeId", "EmployeeId", "PayrollId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollId");

                    b.ToTable("EmployeeEarningCodes");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeExtraHour", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EarningCodeId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("WorkedDay")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan>("EndHour")
                        .HasColumnType("time");

                    b.Property<decimal>("Indice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PayrollId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartHour")
                        .HasColumnType("time");

                    b.Property<int>("StatusExtraHour")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "EarningCodeId", "WorkedDay");

                    b.HasIndex("EarningCodeId");

                    b.HasIndex("PayrollId");

                    b.ToTable("EmployeeExtraHours");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeImage", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("EmployeeImages");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeLoan", b =>
                {
                    b.Property<string>("LoanId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PayrollId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("AmountByDues")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PendingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PendingDues")
                        .HasColumnType("int");

                    b.Property<int>("QtyPeriodForPaid")
                        .HasColumnType("int");

                    b.Property<int>("StartPeriodForPaid")
                        .HasColumnType("int");

                    b.Property<int>("TotalDues")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("LoanId", "EmployeeId", "PayrollId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollId");

                    b.ToTable("EmployeeLoans");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeePosition", b =>
                {
                    b.Property<string>("PositionId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("EmployeePositionStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PositionId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeePositions");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeTax", b =>
                {
                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PayrollId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("TaxId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollId");

                    b.ToTable("EmployeeTaxes");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.FormatCode", b =>
                {
                    b.Property<string>("FormatCodeId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("FormatCodeId");

                    b.ToTable("FormatCodes");

                    b.HasData(
                        new
                        {
                            FormatCodeId = "en-US",
                            Name = "Estado Únidos"
                        },
                        new
                        {
                            FormatCodeId = "es-ES",
                            Name = "España"
                        });
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Instructor", b =>
                {
                    b.Property<string>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.IntructorId),'INT-00000000#')");

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("InstructorId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Job", b =>
                {
                    b.Property<string>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.JobId),'J-00000000#')");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("JobStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("JobId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Loan", b =>
                {
                    b.Property<string>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.LoanId),'LO-00000000#')");

                    b.Property<string>("DepartmentId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IndexBase")
                        .HasColumnType("int");

                    b.Property<string>("LedgerAccount")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LoanStatus")
                        .HasColumnType("bit");

                    b.Property<decimal>("MultiplyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PayFrecuency")
                        .HasColumnType("int");

                    b.Property<string>("ProjCategoryId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProjId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("LoanId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.MenuApp", b =>
                {
                    b.Property<string>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.MenuId),'MENU-000#')");

                    b.Property<string>("Action")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MenuFather")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("MenuId");

                    b.HasIndex("MenuFather");

                    b.ToTable("MenusApp");

                    b.HasData(
                        new
                        {
                            MenuId = "MENU-0006",
                            Action = "Click",
                            Description = "Título de configuración",
                            Icon = "fa fa-setting",
                            MenuName = "Configuración",
                            Sort = 0
                        },
                        new
                        {
                            MenuId = "MENU-0002",
                            Action = "Click",
                            Description = "Listado de colaboradores",
                            Icon = "fa fa-user",
                            MenuFather = "MENU-0006",
                            MenuName = "Colaboradores",
                            Sort = 0
                        });
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.MenuAssignedToUser", b =>
                {
                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MenuId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PrivilegeDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("PrivilegeEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("PrivilegeView")
                        .HasColumnType("bit");

                    b.HasKey("Alias", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuAssignedToUsers");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.PayCycle", b =>
                {
                    b.Property<int>("PayCycleId")
                        .HasColumnType("int");

                    b.Property<string>("PayrollId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("AmountPaidPerPeriod")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DefaultPayDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsForTax")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusPeriod")
                        .HasColumnType("int");

                    b.HasKey("PayCycleId", "PayrollId");

                    b.HasIndex("PayrollId");

                    b.ToTable("PayCycles");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Payroll", b =>
                {
                    b.Property<string>("PayrollId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.PayrollId),'PAY-00000000#')");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsRoyaltyPayroll")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PayFrecuency")
                        .HasColumnType("int");

                    b.Property<bool>("PayrollStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("PayrollId");

                    b.ToTable("Payrolls");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.PayrollProcess", b =>
                {
                    b.Property<string>("PayrollProcessId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.PayrollProcessId),'PPAY-00000000#')");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EmployeeQuantity")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeQuantityForPay")
                        .HasColumnType("int");

                    b.Property<bool>("IsPayCycleTax")
                        .HasColumnType("bit");

                    b.Property<int>("PayCycleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayrollId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PayrollProcessStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjCategoryId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProjId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("UsedForTax")
                        .HasColumnType("bit");

                    b.HasKey("PayrollProcessId");

                    b.HasIndex("PayrollId");

                    b.ToTable("PayrollsProcess");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.PayrollProcessAction", b =>
                {
                    b.Property<int>("InternalId")
                        .HasColumnType("int");

                    b.Property<string>("PayrollProcessId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("ActionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ApplyTSS")
                        .HasColumnType("bit");

                    b.Property<bool>("ApplyTax")
                        .HasColumnType("bit");

                    b.Property<int>("PayrollActionType")
                        .HasColumnType("int");

                    b.HasKey("InternalId", "PayrollProcessId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollProcessId");

                    b.ToTable("PayrollProcessActions");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.PayrollProcessDetail", b =>
                {
                    b.Property<string>("PayrollProcessId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BankAccount")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Document")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("EmployeeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PayMethod")
                        .HasColumnType("int");

                    b.Property<int>("PayrollProcessStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalTaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PayrollProcessId", "EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PayrollProcessDetails");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Position", b =>
                {
                    b.Property<string>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.PositionId),'POS-00000000#')");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsVacant")
                        .HasColumnType("bit");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotifyPositionId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PositionStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PositionId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.PositionRequirement", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PositionId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Name", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("PositionRequirements");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.ProjCategory", b =>
                {
                    b.Property<string>("ProjCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.ProjCategoryId),'PRJC-00000000#')");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LedgerAccount")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ProjCategoryStatus")
                        .HasColumnType("bit");

                    b.HasKey("ProjCategoryId");

                    b.ToTable("ProjCategories");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Project", b =>
                {
                    b.Property<string>("ProjId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.ProjId),'PRJ-00000000#')");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LedgerAccount")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ProjStatus")
                        .HasColumnType("bit");

                    b.HasKey("ProjId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Tax", b =>
                {
                    b.Property<string>("TaxId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IndexBase")
                        .HasColumnType("int");

                    b.Property<string>("LedgerAccount")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("LimitAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LimitPeriod")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MultiplyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PayFrecuency")
                        .HasColumnType("int");

                    b.Property<string>("ProjCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProjId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("TaxStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("TaxId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ProjCategory");

                    b.HasIndex("ProjId");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.TaxDetail", b =>
                {
                    b.Property<int>("InternalId")
                        .HasColumnType("int");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("AnnualAmountHigher")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AnnualAmountNotExceed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApplicableScale")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FixedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Percent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InternalId", "TaxId");

                    b.HasIndex("TaxId");

                    b.ToTable("TaxDetails");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.User", b =>
                {
                    b.Property<string>("Alias")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CompanyDefaultId")
                        .HasColumnType("nvarchar(4)");

                    b.Property<DateTime>("DateTemporaryPassword")
                        .HasColumnType("datetime2");

                    b.Property<int>("ElevationType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FormatCodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryPassword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Alias");

                    b.HasIndex("CompanyDefaultId");

                    b.HasIndex("FormatCodeId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Alias = "Admin",
                            CompanyDefaultId = "Root",
                            DateTemporaryPassword = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ElevationType = 0,
                            Email = "fflores@dynacorp365.com",
                            FormatCodeId = "en-US",
                            Name = "Admin",
                            Password = "e10adc3949ba59abbe56e057f20f883e"
                        });
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.UserImage", b =>
                {
                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Alias");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.ClassRoom", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.CourseLocation", null)
                        .WithMany()
                        .HasForeignKey("CourseLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.CompaniesAssignedToUser", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("Alias")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Company", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Currency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Course", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.ClassRoom", null)
                        .WithMany()
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.CourseType", null)
                        .WithMany()
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.CourseEmployee", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Instructor", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.CourseInstructor", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Instructor", null)
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.CoursePosition", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Instructor", null)
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Employee", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("Country")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeAddress", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeBankAccount", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeContactInf", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeDeductionCode", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.DeductionCode", null)
                        .WithMany()
                        .HasForeignKey("DeductionCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Payroll", null)
                        .WithMany()
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeDocument", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeEarningCode", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.EarningCode", null)
                        .WithMany()
                        .HasForeignKey("EarningCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Payroll", null)
                        .WithMany()
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeExtraHour", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.EarningCode", null)
                        .WithMany()
                        .HasForeignKey("EarningCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Payroll", null)
                        .WithMany()
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeLoan", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Loan", null)
                        .WithMany()
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Payroll", null)
                        .WithMany()
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeePosition", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Position", null)
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EmployeeTax", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Payroll", null)
                        .WithMany()
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.MenuApp", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.MenuApp", null)
                        .WithMany()
                        .HasForeignKey("MenuFather");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.MenuAssignedToUser", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("Alias")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.MenuApp", null)
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.PayCycle", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Payroll", null)
                        .WithMany()
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.PayrollProcess", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Payroll", null)
                        .WithMany()
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.PayrollProcessAction", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.PayrollProcess", null)
                        .WithMany()
                        .HasForeignKey("PayrollProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.PayrollProcessDetail", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.PayrollProcess", null)
                        .WithMany()
                        .HasForeignKey("PayrollProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Position", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Job", null)
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.PositionRequirement", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Position", null)
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Tax", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.ProjCategory", null)
                        .WithMany()
                        .HasForeignKey("ProjCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.TaxDetail", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Tax", null)
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.User", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyDefaultId");

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.FormatCode", null)
                        .WithMany()
                        .HasForeignKey("FormatCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
