// <auto-generated />
using System;
using D365_API_Nomina.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace D365_API_Nomina.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20210405234507_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.HasSequence<int>("ClassRoomId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("CourseLocationId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("CourseTypeId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("DeductionCodeId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("DepartmentId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("EarningCodeId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("IntructorId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("JobId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("MenuId")
                .HasMin(1L)
                .HasMax(9999L);

            modelBuilder.HasSequence<int>("PayrollId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.HasSequence<int>("PositionId")
                .HasMin(1L)
                .HasMax(999999999L);

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.ClassRoom", b =>
                {
                    b.Property<string>("ClassRoomId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.ClassRoomId),'CR-00000000#')");

                    b.Property<int>("AvailableTimeEnd")
                        .HasColumnType("int");

                    b.Property<int>("AvailableTimeStart")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CourseLocationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("MaxStudentQty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ClassRoomId");

                    b.HasIndex("CourseLocationId");

                    b.ToTable("ClassRooms");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Company", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CompanyLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Responsible")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = "Root",
                            Email = "",
                            Name = "Empresa raiz",
                            Responsible = "Administrator"
                        });
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Country", b =>
                {
                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            CountryId = "DOM",
                            Name = "República Dóminicana"
                        },
                        new
                        {
                            CountryId = "CH",
                            Name = "Chile"
                        });
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.CourseLocation", b =>
                {
                    b.Property<string>("CourseLocationId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.CourseLocationId),'CLT-00000000#')");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CourseLocationId");

                    b.ToTable("CourseLocations");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.CourseType", b =>
                {
                    b.Property<string>("CourseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.CourseTypeId),'CT-00000000#')");

                    b.Property<string>("Description")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CourseTypeId");

                    b.ToTable("CourseType");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Currency", b =>
                {
                    b.Property<string>("CurrencyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            CurrencyId = "USD",
                            Name = "Dólares"
                        },
                        new
                        {
                            CurrencyId = "DOP",
                            Name = "Pesos Dominicanos"
                        });
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.DeductionCode", b =>
                {
                    b.Property<string>("DeductionCodeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.DeductionCodeId),'D-00000000#')");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Ctbution_IndexBase")
                        .HasColumnType("int");

                    b.Property<decimal>("Ctbution_LimitAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Ctbution_LimitPeriod")
                        .HasColumnType("int");

                    b.Property<decimal>("Ctbution_MultiplyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Ctbution_PayFrecuency")
                        .HasColumnType("int");

                    b.Property<int>("Dduction_IndexBase")
                        .HasColumnType("int");

                    b.Property<decimal>("Dduction_LimitAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Dduction_LimitPeriod")
                        .HasColumnType("int");

                    b.Property<decimal>("Dduction_MultiplyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Dduction_PayFrecuency")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("LedgerAccount")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PayrollAction")
                        .HasColumnType("int");

                    b.Property<string>("ProjCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("DeductionCodeId");

                    b.ToTable("DeductionCodes");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.DepartmentId),'Dpt-00000000#')");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("QtyWorkers")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.EarningCode", b =>
                {
                    b.Property<string>("EarningCodeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.EarningCodeId),'E-00000000#')");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndexBase")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsISR")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTSS")
                        .HasColumnType("bit");

                    b.Property<string>("LedgerAccount")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MultiplyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProjId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("EarningCodeId");

                    b.ToTable("EarningCodes");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.FormatCode", b =>
                {
                    b.Property<string>("FormatCodeId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("FormatCodeId");

                    b.ToTable("FormatCode");

                    b.HasData(
                        new
                        {
                            FormatCodeId = "en-US",
                            Name = "Estado Únidos"
                        },
                        new
                        {
                            FormatCodeId = "es-ES",
                            Name = "España"
                        });
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Instructor", b =>
                {
                    b.Property<string>("IntructorId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.IntructorId),'INT-00000000#')");

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IntructorId");

                    b.ToTable("Instructor");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Job", b =>
                {
                    b.Property<string>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.JobId),'J-00000000#')");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("JobStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("JobId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.MenuApp", b =>
                {
                    b.Property<string>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.MenuId),'MENU-000#')");

                    b.Property<string>("Action")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MenuFather")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MenuId");

                    b.HasIndex("MenuFather");

                    b.ToTable("MenusApp");

                    b.HasData(
                        new
                        {
                            MenuId = "MENU-0001",
                            Action = "Click",
                            Description = "Título de configuración",
                            Icon = "fa fa-setting",
                            MenuName = "Configuración"
                        },
                        new
                        {
                            MenuId = "MENU-0002",
                            Action = "Click",
                            Description = "Listado de colaboradores",
                            Icon = "fa fa-user",
                            MenuFather = "MENU-0001",
                            MenuName = "Colaboradores"
                        });
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.PayCycle", b =>
                {
                    b.Property<int>("PayCycleId")
                        .HasColumnType("int");

                    b.Property<string>("PayrollId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("AmountPaidPerPeriod")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DefaultPayDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusPeriod")
                        .HasColumnType("int");

                    b.HasKey("PayCycleId", "PayrollId");

                    b.HasIndex("PayrollId");

                    b.ToTable("PayCycles");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Payroll", b =>
                {
                    b.Property<string>("PayrollId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.PayrollId),'PAY-00000000#')");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsRoyaltyPayroll")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PayFrecuency")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("PayrollId");

                    b.ToTable("Payrolls");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Position", b =>
                {
                    b.Property<string>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR dbo.PositionId),'POS-00000000#')");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVacant")
                        .HasColumnType("bit");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PositionStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PositionId");

                    b.HasIndex("JobId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.PositionRequirement", b =>
                {
                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasIndex("PositionId");

                    b.ToTable("PositionRequirements");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.User", b =>
                {
                    b.Property<string>("Alias")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CompanyDefaultId")
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("ElevationType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FormatCodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Alias");

                    b.HasIndex("CompanyDefaultId");

                    b.HasIndex("FormatCodeId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Alias = "Admin",
                            CompanyDefaultId = "Root",
                            ElevationType = 1,
                            Email = "fflores@dynacorp365.com",
                            FormatCodeId = "en-US",
                            Name = "Admin",
                            Password = "e10adc3949ba59abbe56e057f20f883e"
                        });
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.ClassRoom", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.CourseLocation", null)
                        .WithMany()
                        .HasForeignKey("CourseLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Company", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Currency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.MenuApp", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.MenuApp", null)
                        .WithMany()
                        .HasForeignKey("MenuFather");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.PayCycle", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Payroll", null)
                        .WithMany()
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Position", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Job", "Job")
                        .WithMany("ListPosition")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.PositionRequirement", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Position", null)
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.User", b =>
                {
                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyDefaultId");

                    b.HasOne("D365_API_Nomina.Core.Domain.Entities.FormatCode", null)
                        .WithMany()
                        .HasForeignKey("FormatCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("D365_API_Nomina.Core.Domain.Entities.Job", b =>
                {
                    b.Navigation("ListPosition");
                });
#pragma warning restore 612, 618
        }
    }
}
